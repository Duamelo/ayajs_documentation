import{_ as e,o as t,c as a,a as i}from"./app.0db8dcb2.js";const g=JSON.parse('{"title":"aya.Init(width = 1343, height = 1343)","description":"","frontmatter":{},"headers":[{"level":2,"title":"aya.Init(width = 1343, height = 1343)","slug":"aya-init-width-1343-height-1343"},{"level":2,"title":"setlinkcb(cb)","slug":"setlinkcb-cb"},{"level":2,"title":"Component(type, props)","slug":"component-type-props"},{"level":2,"title":"Rectangle(x, y, width, height)","slug":"rectangle-x-y-width-height"},{"level":2,"title":"Lozenge(x, y, width, height)","slug":"lozenge-x-y-width-height"},{"level":2,"title":"Triangle(x1, y1, x2, y2, x3, y3)","slug":"triangle-x1-y1-x2-y2-x3-y3"},{"level":2,"title":"Circle(x, y, r)","slug":"circle-x-y-r"},{"level":2,"title":"Text(x, y, text, size)","slug":"text-x-y-text-size"},{"level":2,"title":"Line(x, y, destx, desty)","slug":"line-x-y-dest-x-dest-y"},{"level":2,"title":"Link(srcpoint, destpoint, line = undefined)","slug":"link-src-point-dest-point-line-undefined"},{"level":2,"title":"Polyline(points=[])","slug":"polyline-points"},{"level":2,"title":"Point(x, y, r)","slug":"point-x-y-r"},{"level":2,"title":"Arc(x0, y0, x, y, angle, ratio)","slug":"arc-x0-y0-x-y-angle-ratio"},{"level":2,"title":"Image(x, y, width, height, path, name)","slug":"image-x-y-width-height-path-name"}],"relativePath":"api/init.md","lastUpdated":1674742062000}'),n={name:"api/init.md"},r=i('<p>When you instantiate aya from the Init class, a set of useful attributes is made available to customize the use of the library. The table below shows the main attributes: their names and descriptions.</p><h2 id="aya-init-width-1343-height-1343" tabindex="-1">aya.Init(width = 1343, height = 1343) <a class="header-anchor" href="#aya-init-width-1343-height-1343" aria-hidden="true">#</a></h2><p><b>Specification : </b> The init class is the entry point of aya. Its constructor takes two parameters: the width and height of the svg.</p><table><thead><tr><th style="text-align:center;">Attributes&#39;s name</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;">width</td><td style="text-align:center;">Width of svg.</td></tr><tr><td style="text-align:center;">height</td><td style="text-align:center;">Height of svg.</td></tr><tr><td style="text-align:center;">svg</td><td style="text-align:center;">Represents the svg document in which we draw all the shapes created from the current instantiation of aya.</td></tr><tr><td style="text-align:center;">config</td><td style="text-align:center;">Allows you to access the basic configurations of aya.</td></tr><tr><td style="text-align:center;">events</td><td style="text-align:center;">Allows to access the events defined by aya and to apply them to the forms.</td></tr><tr><td style="text-align:center;">box</td><td style="text-align:center;">This is the object component representing the default grid of aya.</td></tr></tbody></table><p>Now we&#39;re going to talk about some function available in the Init class.</p><h2 id="setlinkcb-cb" tabindex="-1">setlinkcb(cb) <a class="header-anchor" href="#setlinkcb-cb" aria-hidden="true">#</a></h2><p>Set a callback that represente the instance of link just created.</p><h2 id="component-type-props" tabindex="-1">Component(type, props) <a class="header-anchor" href="#component-type-props" aria-hidden="true">#</a></h2><p>Return a new component based on the type witch is directly drawn in the svg.</p><h2 id="rectangle-x-y-width-height" tabindex="-1">Rectangle(x, y, width, height) <a class="header-anchor" href="#rectangle-x-y-width-height" aria-hidden="true">#</a></h2><p>Return a new rectangular shape on parameters.</p><h2 id="lozenge-x-y-width-height" tabindex="-1">Lozenge(x, y, width, height) <a class="header-anchor" href="#lozenge-x-y-width-height" aria-hidden="true">#</a></h2><p>Return a new lozenge shape on parameters.</p><h2 id="triangle-x1-y1-x2-y2-x3-y3" tabindex="-1">Triangle(x1, y1, x2, y2, x3, y3) <a class="header-anchor" href="#triangle-x1-y1-x2-y2-x3-y3" aria-hidden="true">#</a></h2><p>Return a new triangular shape based on parameters.</p><h2 id="circle-x-y-r" tabindex="-1">Circle(x, y, r) <a class="header-anchor" href="#circle-x-y-r" aria-hidden="true">#</a></h2><p>Return a new circle shape based on parameters.</p><h2 id="text-x-y-text-size" tabindex="-1">Text(x, y, text, size) <a class="header-anchor" href="#text-x-y-text-size" aria-hidden="true">#</a></h2><p>Return a new text based on parameters.</p><h2 id="line-x-y-dest-x-dest-y" tabindex="-1">Line(x, y, dest_x, dest_y) <a class="header-anchor" href="#line-x-y-dest-x-dest-y" aria-hidden="true">#</a></h2><p>Return a new Line shape based on parameters.</p><h2 id="link-src-point-dest-point-line-undefined" tabindex="-1">Link(src_point, dest_point, line = undefined) <a class="header-anchor" href="#link-src-point-dest-point-line-undefined" aria-hidden="true">#</a></h2><p>Return a new Link object that abstractly repr\xE9sente the link materialised by the line&#39;s shape.</p><h2 id="polyline-points" tabindex="-1">Polyline(points=[]) <a class="header-anchor" href="#polyline-points" aria-hidden="true">#</a></h2><p>Return a new polyline shape based on the point&#39;s array.</p><h2 id="point-x-y-r" tabindex="-1">Point(x, y, r) <a class="header-anchor" href="#point-x-y-r" aria-hidden="true">#</a></h2><p>Return a new point shape based on parameters. It&#39;s mainly used to connection&#39;s points or vertex of the shapes.</p><h2 id="arc-x0-y0-x-y-angle-ratio" tabindex="-1">Arc(x0, y0, x, y, angle, ratio) <a class="header-anchor" href="#arc-x0-y0-x-y-angle-ratio" aria-hidden="true">#</a></h2><p>Return a new Arc shape based on parameters.</p><h2 id="image-x-y-width-height-path-name" tabindex="-1">Image(x, y, width, height, path, name) <a class="header-anchor" href="#image-x-y-width-height-path-name" aria-hidden="true">#</a></h2><p>Return a new image based on parameters.</p>',31),h=[r];function s(l,d,o,c,p,y){return t(),a("div",null,h)}var u=e(n,[["render",s]]);export{g as __pageData,u as default};
